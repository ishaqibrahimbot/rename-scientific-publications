So, I am going to try and make a web app that will be deployed to Heroku and will do this:

- A user can upload a list of pdfs that have weird non-self-explanatory names (usually happens in the case of research paper)
- As an output, they will get a zip file with all those pdf files renamed with the title of the pdf file
- In the case of research papers, the new filename will be the year and the title and this will be straightforward to extract (or so I hope)
- As for other pdf documents, will need to figure out a different strategy such as finding the 'topic keyword' through ML maybe (that might be a good exercise for later)

For now, let's limit the focus to just uploading research papers.

So the front-end will have:
- A page where you can drag and drop or upload a range of files
- These files are then sent to the backend for processing
- Once we receive the zipped file containing all renamed pdf files, display a download option that lets users download each file

At the backend:
- Take a pdf file, read it, find the title and the year through Grobid (or some other way), and rename the file
- Take all the renamed files, package them inside a zip file, and send it back to be downloaded

Let's break this down into smaller challenges:
1- (DONE)Take a downloaded pdf and figure out how to use Grobid to extract its title and year of publication
2- (DONE)Figure out how to rename a file in python once you have the new filename decided (should be fairly easy)
3- (DONE)Figure out how to handle a file at the backend (will I need to use a database?)
4- (DONE)Figure out how to zip a file and send it back to the front end
5- (DONE)Make an HTML template with CSS styling for the page where a user can upload pdfs
6- (NOT NEEDED)Make an HTML template with CSS styling for the page where they will download
7- (DONE)Figure out how to allow users to download something from the front-end
8- (DONE)Use the grobid client inside the rename script (i.e. have an end-to-end script that takes pdfs and renames them)
9- (DONE)Figure out how to receive and handle multiple files at the backend
10-(DONE) Merge the grobid processing functionality with the uploads functionality
11- Add a little puzzle game that the user can play while the processing takes place at the backend

Once this app is running properly on my local computer, I will then have to figure out how to deploy this to heroku.

That sounds good. Let's start tackling each of these challenges.

(NOTE: Here are some problems I need to find solutions for)

- How large a file do I want to allow users to upload?
- How do I deal with the slow start-up? (Let's try keeping n=1 for the first try and switching it to a higher value for the next ones) (or just work with n=1) (Ask on the grobid issues section)
- How can I upload this to heroku or aws
- Consider the difference in time between processing the full text and processing just the header. Also, here's a trick, instead of giving in the full pdf, just take the first page. How about that?

Ideas:
1) Process just the header and rename with the title
2) Check out the other services and see what info you get via them
3) Truncate the pdf to just one page and process that only

<-Update on Jun 7 at 23:07->

So after a lot of troubleshooting and endless searching around, I have managed to containerize my application completely. I managed to make an image out of just the front end of my app, and then also managed to use docker-compose to run the 2 containers simultaneously, i.e. the grobid server and my own image. Should definitely document all my learnings somewhere and brainstorm about that. But now we face a new frontier: heroku does not support docker-compose style deployment. With heroku, you can either deploy a single container or deploy a single container with other "add-ons" from Heroku. So I guess no more heroku for me.

Now I've been able to identify and think of some solutions. Here are these:

- Can I package the entire thing into just one docker image? I highly doubt this because the servicess need different servers to run on.
- I just saw an example that uses AWS Elastic Beanstalk to deploy a docker-compose style app with multiple containers. I could go in that direction but will need a lot of research for that.
- I could use Kubernetes. From what I've read that maybe a solution for running multi-container apps so I should now also check that out.

In short, I need to start digging into "deploying multi-container apps to Elastic beanstalk" and "How to use kubernetes to deploy multi-container apps".

So while I read up on this, I should also work on fixing some of the problems listed above about the slow processing, and a new problem I saw: The pdf folder is not being emptied. Something ain't going right there and I need to figure that out.

Also, I need to compromise the date information in favor of speed cause ain't nobody gonna wait for that long.
